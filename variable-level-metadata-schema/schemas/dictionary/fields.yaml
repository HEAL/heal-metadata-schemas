title: HEAL Variable Level Metadata Fields
description: |
  

  !!! note "Highly encouraged"

    - Only `name` and `description` properties are required. 
    - For categorical variables, `constraints.enum` and `enumLabels` (where applicable) properties are highly encouraged. 
    - For studies using HEAL or other common data elements (CDEs), `standardsMappings` information is highly encouraged.
    - `type` and `format` properties may be particularly useful for some variable types (e.g. date-like variables)
type: object
required:
  - name
  - description
properties:
  schemaVersion:
    $ref: "#/definitions/schemaVersion"
  section: 
    type: string 
    title: Section
    description: |
      The section, form, survey instrument, set of measures  or other broad category used 
      to group variables. Previously called "module."
    
    examples:
      - Demographics
      - PROMIS
      - Medical History

  name:
    type: string
    title: Variable Name
    description: |
      The name of a variable (i.e., field) as it appears in the data. 
    examples:
      - gender_id
      
  title:
    type: string
    title: Variable Label (ie Title)
    description: |
      The human-readable title or label of the variable.
    examples: 
    - Gender identity
  description:
    type: string
    title: Variable Description
    description: |
      An extended description of the variable. This could be the definition of a variable or the 
      question text (e.g., if a survey). 
      
    examples:
      - The participant's age at the time of study enrollment
      - What is the highest grade or level of school you have completed or the highest degree you have received?
  type:
    title: Variable Type
    type: string
    description: |
      A classification or category of a particular data element or property expected or allowed in the dataset.
    additionalDescription: |
      enum definitions:

      -  `number` (A numeric value with optional decimal places. (e.g., 3.14))
      -  `integer` (A whole number without decimal places. (e.g., 42))
      -  `string` (A sequence of characters. (e.g., \"test\"))
      -  `any` (Any type of data is allowed. (e.g., true))
      -  `boolean` (A binary value representing true or false. (e.g., true))
      -  `date` (A specific calendar date. (e.g., \"2023-05-25\"))
      -  `datetime` (A specific date and time, including timezone information. (e.g., \"2023-05-25T10:30:00Z\"))
      -  `time` (A specific time of day. (e.g., \"10:30:00\"))
      -  `year` (A specific year. (e.g., 2023)
      -  `yearmonth` (A specific year and month. (e.g., \"2023-05\"))
      -  `duration` (A length of time. (e.g., \"PT1H\")
      -  `geopoint` (A pair of latitude and longitude coordinates. (e.g., [51.5074, -0.1278]))
    enum:
      - number
      - integer
      - string
      - any
      - boolean
      - date
      - datetime
      - time
      - year
      - yearmonth
      - duration
      - geopoint
  format:
    title: Variable Format
    type: string
    description: |
      Indicates the format of the type specified in the `type` property. 
      Each format is dependent on the `type` specified. 
      See [here](https://specs.frictionlessdata.io/table-schema/#types-and-formats) 
      for more information about appropriate `format` values by variable `type`.

    additionalDescription: |
      examples/definitions of patterns and possible values:

      Examples of date time pattern formats

      - `%Y-%m-%d` (for date, e.g., 2023-05-25)
      - `%Y%-%d` (for date, e.g., 20230525) for date without dashes
      - `%Y-%m-%dT%H:%M:%S` (for datetime, e.g., 2023-05-25T10:30:45)
      - `%Y-%m-%dT%H:%M:%SZ` (for datetime with UTC timezone, e.g., 2023-05-25T10:30:45Z)
      - `%Y-%m-%dT%H:%M:%S%z` (for datetime with timezone offset, e.g., 2023-05-25T10:30:45+0300)
      - `%Y-%m-%dT%H:%M` (for datetime without seconds, e.g., 2023-05-25T10:30)
      - `%Y-%m-%dT%H` (for datetime without minutes and seconds, e.g., 2023-05-25T10)
      - `%H:%M:%S` (for time, e.g., 10:30:45)
      - `%H:%M:%SZ` (for time with UTC timezone, e.g., 10:30:45Z)
      - `%H:%M:%S%z` (for time with timezone offset, e.g., 10:30:45+0300)

      Examples of string formats

      - `email` if valid emails (e.g., test@gmail.com)
      - `uri` if valid uri addresses (e.g., https://example.com/resource123)
      - `binary` if a base64 binary encoded string (e.g., authentication token like aGVsbG8gd29ybGQ=)
      - `uuid` if a universal unique identifier also known as a guid (eg., f47ac10b-58cc-4372-a567-0e02b2c3d479)


      Examples of geopoint formats

      The two types of formats for `geopoint` (describing a geographic point).

      - `array` (if 'lat,long' (e.g., 36.63,-90.20))
      - `object` (if {'lat':36.63,'lon':-90.20})

  constraints:
    type: object
    properties:
      required:
        type: boolean
        title: Required variable
        description: |
          If this variable is marked as true, then this variable's value must be present
          (ie not missing; see missingValues). If marked as false or not present, then the 
          variable CAN be missing.
      maxLength:
        type: integer
        title: Maximum Length
        description: |
          Indicates the maximum length of an iterable (e.g., array, string, or
          object). For example, if 'Hello World' is the longest value of a
          categorical variable, this would be a maxLength of 11.

      enum:
        type: array
        title: Variable Possible Values
        description: |
          Constrains possible values to a set of values.
        examples:
        - [1,2,3,4,5]
        - ["Poor","Fair","Good","Very good","Excellent"]
      pattern:
        type: string
        title: Regular Expression Pattern
        description:   |
          A regular expression pattern the data MUST conform to.
          
      maximum:
        type: integer
        title: Maximum Value
        description: |
          Specifies the maximum value of a field (e.g., maximum -- or most
          recent -- date, maximum integer etc). Note, this is different then
          maxLength property.

      minimum:
        type: integer
        title: Minimum Value
        description: |
          Specifies the minimum value of a field.

  enumLabels:
    title: 'Variable Value Encodings (i.e., mappings; value labels)'
    description: |
      Variable value encodings provide a way to further annotate any value within a any variable type,
      making values easier to understand. 

      
      Many analytic software programs (e.g., SPSS,Stata, and SAS) use numerical encodings and some algorithms
      only support numerical values. Encodings (and mappings) allow categorical values to be stored as
      numerical values.
      
      Additionally, as another use case, this field provides a way to
      store categoricals that are stored as  "short" labels (such as
      abbreviations).

      This field is intended to follow [this pattern](https://specs.frictionlessdata.io/patterns/#table-schema-enum-labels-and-ordering)

    type: object
    examples: 
      - {"1":"Poor","2":"Fair","3":"Good","4":"Very good","5":"Excellent"}
      - {"HW":"Hello world","GBW":"Good bye world","HM":"Hi, Mike"}
  enumOrdered:
    title: An ordered variable
    description: |
      Indicates whether a categorical variable is ordered. This variable  is
      relevant for variables that have an ordered relationship but not
      necessarily  a numerical relationship (e.g., Strongly disagree < Disagree
      < Neutral < Agree).

      This field is intended to follow the ordering aspect of this [this pattern][this pattern](https://specs.frictionlessdata.io/patterns/#table-schema-enum-labels-and-ordering)

    type: boolean
  missingValues:
    title: Missing Values
    description: |
      A list of missing values specific to a variable.

    examples:

    - ["Missing","Skipped","No preference"]
    - ["Missing"]
    type: array
  trueValues:
    title: Boolean True Value Labels
    description: |
      For boolean (true) variable (as defined in type field), this field allows
      a physical string representation to be cast as true (increasing
      readability of the field). It can include one or more values.

    type: array
    examples:
    - ["required","Yes","Checked"]
    - ["required"]
  falseValues:
    title: Boolean False Value Labels
    description: |
      For boolean (false) variable (as defined in type field), this field allows
      a physical string representation to be cast as false (increasing
      readability of the field) that is not a standard false value. It can include one or more values.
    type: array
    examples:
    - ["Not required","NOT REQUIRED"]
    - ["No"]
  standardsMappings:
    $ref: "#/definitions/fieldStandardsMappingsItem"
  custom:
    type: object
    description: |
      Additional properties not included a core property. 