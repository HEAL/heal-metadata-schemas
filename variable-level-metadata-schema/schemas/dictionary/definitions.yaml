csvFieldPatterns:
  lenTwoItemIter: "^(?:[^|=]*=[^|]*\|){0,1}[^|=]*=[^|=]*=(?:\|[^|=]*=[^|=]*){0,1}$"
  arrayOf: 
    values: "^(?:[^|]+\|)*[^|]*\|?$"
    objects:
      threeProps: "^(?:[^|=]*=){3}(?:[^|]*\|[^|=]*=){2}[^|]*=(?:[^|]*\|)?$"
      twoProps: 
        $ref: "#/csvFieldPatterns/lenTwoItemIter"
  object: 
      $ref: "#/csvFieldPatterns/lenTwoItemIter"

csvBooleanTrueValues:
csvBooleanFalseValues:
csvBooleanValues:
csvNumberValues:
csvStringValues:
csvIntegerValues:



jsonArray:
  type: array
csvArray:
  type: string 
  pattern: 
    $ref: "#/csvFieldPatterns/arrayOf/values"


jsonObject:
  type: object 
csvObject:
  type: string 
  pattern: 
    $ref: "#/csvFieldPatterns/object"

jsonBoolean:
  type: boolean 
csvBoolean:
  type: string 
  enum: 
    $ref: "#/booleanReps"




fields:
  title: HEAL Variable Level Metadata Fields
  description: >
    Variable level metadata individual fields integrated into the variable level
    metadata object within the HEAL platform metadata service.
  type: object
  required:
    - name
    - description
  properties:
    name:
      type: string
      title: Variable Name
      description: |
        The name of a variable (i.e., field) as it appears in the data.
    title:
      type: string
      title: Variable Label (ie Title)
      description: The human-readable title of the variable.
    description:
      type: string
      title: Variable Description
      description: An extended description of the variable.
      examples:
        - Definition
        - Question text (if a survey)
    type:
      type: string
      title: Variable Type
      description: >
        A classification allowing the user (analyst, researcher or computer) to
        know how to use the variable
    format:
      type: string
      title: Variable Format
      description: >
        Indicates the format of the type specified in the `type` property. This
        may describe the type of unit (such as for time fields like year or month)
        or the format of a date field (such as %y%m%d).
    constraints:
      type: object
      properties:
        maxLength:
          type: integer
          title: Maximum Length
          description: >
            Indicates the maximum length of an iterable (e.g., array, string, or
            object). For example, if 'Hello World' is the longest value of a
            categorical variable, this would be a maxLength of 11.
        enum:
          _jsonSpec:
            type: array
          _csvSpec:
            type: string
            pattern: "#/csvFieldPatterns/arrayOf/values"
        title: Variable Possible Values
        description: |
          Constrains possible values to a set of values.
        pattern:
          type: string
          title: Regular Expression Pattern
          description: |
            A regular expression pattern the data MUST conform to.
        maximum:
          type: integer
          title: Maximum Value
          description: >
            Specifies the maximum value of a field (e.g., maximum -- or most
            recent -- date, maximum integer etc). Note, this is different then
            maxLength property.
    encoding:
      title: 'Variable Value Encodings (i.e., mappings; value labels)'
      description: >
        Encodings (and mappings) allow categorical values to be stored as
        numerical values. IMPORTANT: the ==key should be the value represented IN
        the data== and the ==value should be the to-be-mapped label==. Many
        analytic software programs use numerical encodings and some algorithms
        only support numerical values. Additionally, this field provides a way to
        store categoricals that are stored as  "short" labels (such as
        abbreviations)
      _jsonSpec:
        $ref: "#/jsonObject"
        examples:
          - '{0:"No",1:"Yes"}'
          - '{"HW":"Hello world","GBW":"Good bye world"}'
      _csvSpec:
          $ref: "#/csvObject"
    ordered:
      type: boolean
      title: An ordered variable
      description: >
        Indicates whether a categorical variable is ordered. This variable  is
        relevant for variables that have an ordered relationship but not
        necessarily  a numerical relationship (e.g., Strongly disagree < Disagree
        < Neutral < Agree).
      #TODO: for csv add truey and falsey values from healdata-utils as enum
    missingValues:
      title: Missing Values
      description: A list of missing values specific to a variable.
      _jsonSpec:
        type: array
      _csvSpec:
        type: string 
        pattern: "#/csvFieldPatterns/arrayOf/values"
    trueValues:
      type: array
      title: Boolean True Value Labels
      description: >
        For boolean (true) variable (as defined in type field), this field allows
        a physical string representation to be cast as true (increasing
        readability of the field)
      items:
        type: string
      examples:
        - 'Yes'
        - '1'
        - 'True'
        - 'true'
        - Correct
    falseValues:
      type: array
      title: Boolean False Value Labels
      description: >
        For boolean (false) variable (as defined in type field), this field allows
        a physical string representation to be cast as false (increasing
        readability of the field)
      items:
        type: string
      examples:
        - 'No'
        - '0'
        - 'False'
        - 'false'
        - Incorrect
    repo_link:
      type: string
      title: Variable Repository Link
      description: |
        A link to the variable as it exists on the home repository, if applicable
    cde_id:
      type: array
      title: Common Data Element Id
      description: The source and id for the NIH Common Data Elements program.
      items:
        type: object
        properties:
          source:
            type: string
          id:
            type: string
    ontology_id:
      type: array
      title: Ontology ID
      description: >
        Ontological information for the given variable as indicated  by the
        source, id, and relation to the specified classification. One or more
        ontology classifications can be specified. 
      items:
        type: object
        properties:
          relation:
            type: string
          source:
            type: string
          id:
            type: string
    univar_stats:
      type: object
      properties:
        median:
          type: number
        mean:
          type: number
        std:
          type: number
        min:
          type: number
        max:
          type: number
        mode:
          type: number
        count:
          type: integer
          minimum: 0
        twenty_five_percentile:
          type: number
        seventy_five_percentile:
          type: number
        cat_marginals:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: integer
