csvIntegerNames:
  type: string 
  enum:
    - 'Integer'
    - 'integer'
    - 'INTEGER'
    - 'Int'
    - 'INT'
    - 'int'
csvNumberNames:
  type: string 
  enum:
    - 'float'
    - 'Float'
    - 'FLOAT'
    - 'NUM'
    - 'Num'
    - 'num'
    - 'number'
    - 'Number'
    - 'NUMBER'
csvStringNames:
  type: string 
  enum:
    - 'text'
    - 'TEXT'
    - 'Text'
    - 'string'
    - 'STRING'
    - 'String'
    - 'CHAR'
    - 'char'
    - 'Char'
csvBooleanTrueValues:
  type: string 
  enum:
    - 'TRUE'
    - 'True'
    - 'true'
    - '1'
    - 'YES'
    - 'yes'
    - 'Yes'
    - 'y'
    - 'Y'
    - 'T' 
    - 't'
csvBooleanFalseValues:
  type: string 
  enum:
    - 'FALSE'
    - 'false'
    - 'False'
    - '0'
    - 'no'
    - 'No'
    - 'NO'
    - 'N'
    - 'n'
    - 'f' 
    - 'F'

# for frictionless types and formats see:
# https://specs.frictionlessdata.io/table-schema/#types-and-formats
frictionlessTypes:
  type: string
  examples:
    - number: A numeric value with optional decimal places. (e.g., 3.14)
    - integer: A whole number without decimal places. (e.g., 42)
    - string: A sequence of characters. (e.g., "test")
    - any: Any type of data is allowed. (e.g., true)
    - boolean: A binary value representing true or false. (e.g., true)
    - date: A specific calendar date. (e.g., "2023-05-25")
    - datetime: A specific date and time, including timezone information. (e.g., "2023-05-25T10:30:00Z")
    - time: A specific time of day. (e.g., "10:30:00")
    - year: A specific year. (e.g., 2023)
    - yearmonth: A specific year and month. (e.g., "2023-05")
    - duration: A length of time. (e.g., "PT1H")
    - geopoint: A pair of latitude and longitude coordinates. (e.g., [51.5074, -0.1278])
  enum:
    - "number"
    - "integer"
    - "string"
    - "any"
    - "boolean"
    - "date"
    - "datetime"
    - "time"
    - "year"
    - "yearmonth"
    - "duration"
    - "geopoint"

# need to make additional conditional check in fricitonless (if/then/else not available)
frictionlessFormats:
  name: frictionless_formats
  title: Frictionless Formats
  description: A format taken from one of the [frictionless specification](https://specs.frictionlessdata.io/) schemas.
    For example, for tabular data, there is the [Table Schema specification](https://specs.frictionlessdata.io/table-schema)
  anyOf:
    - name: string_format
      title: String Format
      enum: 
      - uri 
      - email 
      - binary 
      - uuid
    - name: date_format
      title: Date Format
      description: |
        A format for a date variable (`date`,`time`,`datetime`).  
            * **default**: An ISO8601 format string.
            * **any**: Any parsable representation of a date/time/datetime. The implementing library can attempt to parse the datetime via a range of strategies.
            * **{PATTERN}**: The value can be parsed according to `{PATTERN}`, which `MUST` follow the date formatting syntax of C / Python [strftime](http://strftime.org/).
      examples:
        - "`%Y-%m-%d` (for date, e.g., 2023-05-25)"
        - "`%Y%-%d` (for date, e.g., 20230525) for date without dashes"
        - "`%Y-%m-%dT%H:%M:%S` (for datetime, e.g., 2023-05-25T10:30:45)"
        - "`%Y-%m-%dT%H:%M:%SZ` (for datetime with UTC timezone, e.g., 2023-05-25T10:30:45Z)"
        - "`%Y-%m-%dT%H:%M:%S%z` (for datetime with timezone offset, e.g., 2023-05-25T10:30:45+0300)"
        - "`%Y-%m-%dT%H:%M` (for datetime without seconds, e.g., 2023-05-25T10:30)"
        - "`%Y-%m-%dT%H` (for datetime without minutes and seconds, e.g., 2023-05-25T10)"
        - "`%H:%M:%S` (for time, e.g., 10:30:45)"
        - "`%H:%M:%SZ` (for time with UTC timezone, e.g., 10:30:45Z)"
        - "`%H:%M:%S%z` (for time with timezone offset, e.g., 10:30:45+0300)"
    - name: geopoint_format
      title: Geopoint Format
      description: The two types of formats for `geopoint` (describing a geographic point).
      oneOf:
      - type: array
        description: |
          A JSON array or a string parsable as a JSON array where each item is a number with the first 
          as the latitude and the second as longitude. 
      - type: object
        description: |
          Contains latitude and longitude with two keys ("lat" and "long") with number items mapped to each key.

    - name: geojson
      description: The JSON object according to the geojson spec.
      enum: [topojson,default]


csvRequiredBooleanValues:
  type: string 
  enum:
    - 'REQUIRED'
    - 'Required'
    - 'required'
csvNotRequiredBooleanValues:
  type: string 
  enum:
    - 'Not Required'
    - 'Not required'
    - 'not required'
    - 'NOT REQUIRED'

csvArray:
  type: string 
  pattern: ^(?:[^|]+\||[^|]*)(?:[^|]*\|)*[^|]*$

csvObject:
  type: string 
  pattern: ^(?:.*?=.*?(?:\||$))+$
csvBoolean:
  anyOf:
    - $ref: "#/csvBooleanTrueValues"
    - $ref: "#/csvBooleanFalseValues"