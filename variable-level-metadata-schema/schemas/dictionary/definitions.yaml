csvArray:
  type: string 
  pattern: ^(?:[^|]+\||[^|]*)(?:[^|]*\|)*[^|]*$

csvObject:
  type: string 
  pattern: ^(?:.*?=.*?(?:\||$))+$


# for frictionless types and formats see:
# https://specs.frictionlessdata.io/table-schema/#types-and-formats

# NOTE: The below was excluded from schema to simplify (10/6/2023) and formats is now just type string isntead of anyOf
stringFormat:
  title: String Formats
  description: |
    A format for a specialized type of string of:

    - "`email` if valid emails (e.g., test@gmail.com)"
    - "`uri` if valid uri addresses (e.g., https://example.com/resource123)"
    - "`binary` if a base64 binary encoded string (e.g., authentication token like aGVsbG8gd29ybGQ=)"
    - "`uuid` if a universal unique identifier also known as a guid (eg., f47ac10b-58cc-4372-a567-0e02b2c3d479)"

  enum: 
  - uri 
  - email 
  - binary 
  - uuid

dateFormat:
  title: Date Formats
  type: string
  description: |
    A format for a date variable (`date`,`time`,`datetime`).  
        **default**: An ISO8601 format string.
        **any**: Any parsable representation of a date/time/datetime. The implementing library can attempt to parse the datetime via a range of strategies.
  
    **{PATTERN}**: The value can be parsed according to `{PATTERN}`,
     which `MUST` follow the date formatting syntax of 
     C / Python [strftime](http://strftime.org/) such as:

    - "`%Y-%m-%d` (for date, e.g., 2023-05-25)"
    - "`%Y%-%d` (for date, e.g., 20230525) for date without dashes"
    - "`%Y-%m-%dT%H:%M:%S` (for datetime, e.g., 2023-05-25T10:30:45)"
    - "`%Y-%m-%dT%H:%M:%SZ` (for datetime with UTC timezone, e.g., 2023-05-25T10:30:45Z)"
    - "`%Y-%m-%dT%H:%M:%S%z` (for datetime with timezone offset, e.g., 2023-05-25T10:30:45+0300)"
    - "`%Y-%m-%dT%H:%M` (for datetime without seconds, e.g., 2023-05-25T10:30)"
    - "`%Y-%m-%dT%H` (for datetime without minutes and seconds, e.g., 2023-05-25T10)"
    - "`%H:%M:%S` (for time, e.g., 10:30:45)"
    - "`%H:%M:%SZ` (for time with UTC timezone, e.g., 10:30:45Z)"
    - "`%H:%M:%S%z` (for time with timezone offset, e.g., 10:30:45+0300)"


geojsonFormat:
  title: Geojson Formats
  type: string
  description: The JSON object according to the geojson spec.
  enum: [topojson,default]

geopointFormat:
  title: Geopoint Format
  type: string
  description: |
    The two types of formats for `geopoint` (describing a geographic point).

    - `array` (if 'lat,long' (e.g., 36.63,-90.20))
    - `object` (if {'lat':36.63,'lon':-90.20})
  enum: [array,object]

