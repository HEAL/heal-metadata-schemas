{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$id": "vlmd-fields",
    "title": "HEAL Variable Level Metadata Fields",
    "description": "Variable level metadata individual fields integrated into the variable level\nmetadata object within the HEAL platform metadata service.\n\n> Only `name`` and `description` are required. The other fields are either recommended (but optional) or optional.\n",
    "type": "object",
    "required": [
        "name",
        "description"
    ],
    "properties": {
        "module": {
            "type": "string",
            "title": "Module",
            "description": "The section, form, survey instrument, set of measures  or other broad category used \nto group variables.\n",
            "examples": [
                "Demographics",
                "PROMIS",
                "Substance use",
                "Medical History",
                "Sleep questions",
                "Physical activity"
            ]
        },
        "name": {
            "type": "string",
            "title": "Variable Name",
            "description": "The name of a variable (i.e., field) as it appears in the data.\n"
        },
        "title": {
            "type": "string",
            "title": "Variable Label (ie Title)",
            "description": "The human-readable title or label of the variable.",
            "examples": [
                "My Variable (for name of my_variable)"
            ]
        },
        "description": {
            "type": "string",
            "title": "Variable Description",
            "description": "An extended description of the variable. This could be the definition of a variable or the question text (e.g., if a survey).",
            "examples": [
                "Definition",
                "Question text (if a survey)"
            ]
        },
        "type": {
            "title": "Variable Type",
            "description": "The data type of the variable. This categorization allows the researcher to know what operations can be performed\nwith the variable (i.e., statistical test) in addition to telling the computer how to effectively store these data.\n",
            "type": "string",
            "examples": [
                {
                    "number": "A numeric value with optional decimal places. (e.g., 3.14)"
                },
                {
                    "integer": "A whole number without decimal places. (e.g., 42)"
                },
                {
                    "string": "A sequence of characters. (e.g., \"test\")"
                },
                {
                    "any": "Any type of data is allowed. (e.g., true)"
                },
                {
                    "boolean": "A binary value representing true or false. (e.g., true)"
                },
                {
                    "date": "A specific calendar date. (e.g., \"2023-05-25\")"
                },
                {
                    "datetime": "A specific date and time, including timezone information. (e.g., \"2023-05-25T10:30:00Z\")"
                },
                {
                    "time": "A specific time of day. (e.g., \"10:30:00\")"
                },
                {
                    "year": "A specific year. (e.g., 2023)"
                },
                {
                    "yearmonth": "A specific year and month. (e.g., \"2023-05\")"
                },
                {
                    "duration": "A length of time. (e.g., \"PT1H\")"
                },
                {
                    "geopoint": "A pair of latitude and longitude coordinates. (e.g., [51.5074, -0.1278])"
                }
            ],
            "enum": [
                "number",
                "integer",
                "string",
                "any",
                "boolean",
                "date",
                "datetime",
                "time",
                "year",
                "yearmonth",
                "duration",
                "geopoint"
            ]
        },
        "format": {
            "title": "Frictionless Formats",
            "description": "A format taken from one of the [frictionless specification](https://specs.frictionlessdata.io/) schemas. For example, for tabular data, there is the [Table Schema specification](https://specs.frictionlessdata.io/table-schema)",
            "name": "frictionless_formats",
            "anyOf": [
                {
                    "name": "string_format",
                    "title": "String Format",
                    "enum": [
                        "uri",
                        "email",
                        "binary",
                        "uuid"
                    ]
                },
                {
                    "name": "date_format",
                    "title": "Date Format",
                    "description": "A format for a date variable (`date`,`time`,`datetime`).  \n    * **default**: An ISO8601 format string.\n    * **any**: Any parsable representation of a date/time/datetime. The implementing library can attempt to parse the datetime via a range of strategies.\n    * **{PATTERN}**: The value can be parsed according to `{PATTERN}`, which `MUST` follow the date formatting syntax of C / Python [strftime](http://strftime.org/).\n",
                    "examples": [
                        "`%Y-%m-%d` (for date, e.g., 2023-05-25)",
                        "`%Y%-%d` (for date, e.g., 20230525) for date without dashes",
                        "`%Y-%m-%dT%H:%M:%S` (for datetime, e.g., 2023-05-25T10:30:45)",
                        "`%Y-%m-%dT%H:%M:%SZ` (for datetime with UTC timezone, e.g., 2023-05-25T10:30:45Z)",
                        "`%Y-%m-%dT%H:%M:%S%z` (for datetime with timezone offset, e.g., 2023-05-25T10:30:45+0300)",
                        "`%Y-%m-%dT%H:%M` (for datetime without seconds, e.g., 2023-05-25T10:30)",
                        "`%Y-%m-%dT%H` (for datetime without minutes and seconds, e.g., 2023-05-25T10)",
                        "`%H:%M:%S` (for time, e.g., 10:30:45)",
                        "`%H:%M:%SZ` (for time with UTC timezone, e.g., 10:30:45Z)",
                        "`%H:%M:%S%z` (for time with timezone offset, e.g., 10:30:45+0300)"
                    ]
                },
                {
                    "name": "geopoint_format",
                    "title": "Geopoint Format",
                    "description": "The two types of formats for `geopoint` (describing a geographic point).",
                    "oneOf": [
                        {
                            "type": "array",
                            "description": "A JSON array or a string parsable as a JSON array where each item is a number with the first \nas the latitude and the second as longitude. \n"
                        },
                        {
                            "type": "object",
                            "description": "Contains latitude and longitude with two keys (\"lat\" and \"long\") with number items mapped to each key.\n"
                        }
                    ]
                },
                {
                    "name": "geojson",
                    "description": "The JSON object according to the geojson spec.",
                    "enum": [
                        "topojson",
                        "default"
                    ]
                }
            ]
        },
        "constraints": {
            "type": "object",
            "properties": {
                "maxLength": {
                    "type": "integer",
                    "title": "Maximum Length",
                    "description": "Indicates the maximum length of an iterable (e.g., array, string, or\nobject). For example, if 'Hello World' is the longest value of a\ncategorical variable, this would be a maxLength of 11.\n"
                },
                "enum": {
                    "title": "Variable Possible Values",
                    "description": "Constrains possible values to a set of values.",
                    "type": "array"
                },
                "pattern": {
                    "type": "string",
                    "title": "Regular Expression Pattern",
                    "description": "A regular expression pattern the data MUST conform to."
                },
                "maximum": {
                    "type": "integer",
                    "title": "Maximum Value",
                    "description": "Specifies the maximum value of a field (e.g., maximum -- or most\nrecent -- date, maximum integer etc). Note, this is different then\nmaxLength property.\n"
                }
            }
        },
        "encodings": {
            "title": "Variable Value Encodings (i.e., mappings; value labels)",
            "description": "Encodings (and mappings) allow categorical values to be stored as\nnumerical values. IMPORTANT: the ==key should be the value represented IN\nthe data== and the ==value should be the to-be-mapped label==. Many\nanalytic software programs use numerical encodings and some algorithms\nonly support numerical values. Additionally, this field provides a way to\nstore categoricals that are stored as  \"short\" labels (such as\nabbreviations).\n",
            "type": "object",
            "examples": [
                "{0:\"No\",1:\"Yes\"}",
                "{\"HW\":\"Hello world\",\"GBW\":\"Good bye world\",\"HM\":\"Hi, Mike\"}"
            ]
        },
        "ordered": {
            "title": "An ordered variable",
            "description": "Indicates whether a categorical variable is ordered. This variable  is\nrelevant for variables that have an ordered relationship but not\nnecessarily  a numerical relationship (e.g., Strongly disagree < Disagree\n< Neutral < Agree).\n",
            "type": "boolean"
        },
        "missingValues": {
            "title": "Missing Values",
            "description": "A list of missing values specific to a variable.",
            "type": "array"
        },
        "trueValues": {
            "title": "Boolean True Value Labels",
            "description": "For boolean (true) variable (as defined in type field), this field allows\na physical string representation to be cast as true (increasing\nreadability of the field). It can include one or more values.\n",
            "type": "array",
            "items": {
                "type": "string"
            },
            "examples": [
                "Required",
                "REQUIRED",
                "required",
                "Yes",
                "Checked\""
            ]
        },
        "falseValues": {
            "title": "Boolean False Value Labels",
            "description": "For boolean (false) variable (as defined in type field), this field allows\na physical string representation to be cast as false (increasing\nreadability of the field) that is not a standard false value. It can include one or more values.\n",
            "type": "array"
        },
        "repo_link": {
            "type": "string",
            "title": "Variable Repository Link",
            "description": "A link to the variable as it exists on the home repository, if applicable\n"
        },
        "standardsMappings": {
            "title": "Standards Mappings",
            "description": "A mapping(s) to a published set of standard variables such as the NIH Common Data Elements program.\nOne or more mappings can be specified. \n",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "type": {
                        "description": "The type of mapping.",
                        "examples": [
                            "cde",
                            "ontology",
                            null
                        ],
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            }
        },
        "relatedConcepts": {
            "title": "Related concepts",
            "description": "A set of published concepts related to the given field such as \nontological information (eg., NCI thesaurus, bioportal etc)\n",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            }
        },
        "univarStats": {
            "type": "object",
            "properties": {
                "median": {
                    "type": "number"
                },
                "mean": {
                    "type": "number"
                },
                "std": {
                    "type": "number"
                },
                "min": {
                    "type": "number"
                },
                "max": {
                    "type": "number"
                },
                "mode": {
                    "type": "number"
                },
                "count": {
                    "type": "integer",
                    "minimum": 0
                },
                "twentyFifthPercentile": {
                    "type": "number"
                },
                "seventyFifthPercentile": {
                    "type": "number"
                },
                "categoricalMarginals": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "count": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        }
    }
}